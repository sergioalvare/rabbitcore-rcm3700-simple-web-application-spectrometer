/*******************************************************************************
        Samples\TcpIp\RabbitWeb\thermo_graph.c
        Digi International Inc., 2010


		  Most of the interesting part of this sample is in the ZHTML file,
		  which includes JavaScript code to manipulate graphical objects.
		  The JS code is in graph.js.  See the two #ximport statements
		  below.

		  NOTE: since this uses the <canvas> HTML tag, including text
		  manipulations, you will need to use a modern browser such as
		  Firefox 3.5, Chrome or Safari.  Microsoft IE 8 is not supported as
		  of the date of writing, however IE 9 is expected to work.  Any browser
		  which supports HTML 5 should work.

		  See:
        samples\tcpip\rabbitweb\pages\thermo_graph.zhtml
        samples\tcpip\rabbitweb\pages\graph.js
        https://developer.mozilla.org/en/HTML/Canvas


*******************************************************************************/


#define TCPCONFIG 1



/*
 * This is needed to be able to use the RabbitWeb HTTP enhancements and the
 * ZHTML scripting language.
 */
#define USE_RABBITWEB 1

#memmap xmem

#use "dcrtcp.lib"
#use "http.lib"

/*
 * This page contains the ZHTML portion of the selection variable demonstration
 */
#ximport "samples/tcpip/rabbitweb/pages/thermo_graph.zhtml"	therm_graph_zhtml
#ximport "samples/tcpip/rabbitweb/pages/graph.js"	graph_js

/* The default mime type for '/' must be first */
SSPEC_MIMETABLE_START
   // This handler enables the ZHTML parser to be used on ZHTML files...
	SSPEC_MIME_FUNC(".zhtml", "text/html", zhtml_handler),
	SSPEC_MIME(".html", "text/html"),
	SSPEC_MIME(".js", "text/javascript")
SSPEC_MIMETABLE_END

/* Associate the #ximported files with the web server */
SSPEC_RESOURCETABLE_START
	SSPEC_RESOURCE_XMEMFILE("/", therm_graph_zhtml),
	SSPEC_RESOURCE_XMEMFILE("/index.zhtml", therm_graph_zhtml),
	SSPEC_RESOURCE_XMEMFILE("/graph.js", graph_js)
SSPEC_RESOURCETABLE_END

/*
 * Structure variable to be registered.  Note that you can use watch
 * expressions or the evaluate expression feature during runtime to ensure that
 * the variables have properly changed values.
 */


#define N_THERMO 80		// 80 * 15sec = 20 min



void transfer_display()
{
	// The actual data needs to be transferred to a #web registered variable
	// for transmission to the browser.  Pick the appropriately selected
	// data interval...  (Only the data is copied, the option settings
	// already live in the #web variable).
	
		memcpy(thermo.temp, thermo_20min.temp,
				sizeof(thermo.temp) * 5);
}




void main(void)
{
	int i;
	unsigned T;


	transfer_display();

	// Initialize the TCP/IP stack and HTTP server
	// Start network and wait for interface to come up (or error exit).
	sock_init_or_exit(1);
   http_init();

	// This yields a performance improvement for an HTTP server
	tcp_reserveport(80);

#define UPD_INTVL 250	// ms between updates.  Each update represents
								// 15000 ms, so putting 250 here speeds up the
								// simulation 60x i.e. 1 sec real time is 1 minute
								// simulated time.
	T = _SET_SHORT_TIMEOUT(UPD_INTVL);
   while (1) {
		// Drive the HTTP server
      http_handler();
      if (_CHK_SHORT_TIMEOUT(T)) {
      	T = _SET_SHORT_TIMEOUT(UPD_INTVL);
			add_simulated_sample();
			transfer_display();
      }
   }
}

